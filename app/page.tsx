"use client";

import { useState, useEffect } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import {
  AlertTriangle,
  FileText,
  PlusCircle,
  ChevronRight,
  BarChart4,
  GitBranch,
  HelpCircle,
  CheckCircle2,
  ClipboardList,
  Lightbulb,
} from "lucide-react";
import IshikawaDiagram from "@/app/components/ishikawa-diagram";
import FiveWhysAnalysis from "@/app/components/five-whys-analysis";
import ParetoAnalysis from "@/app/components/pareto-analysis";
import SolutionProposal from "@/app/components/solution-proposal";
import FmeaAnalysis from "@/app/components/fmea-analysis";
import RootCauseConclusion from "@/app/components/root-cause-conclusion";
import { analyzeData, generateRootCause, generateSolutions } from "@/app/utils/analysis-engine";

export default function SolveApp() {
  const [activeTab, setActiveTab] = useState("definicion");
  const [problem, setProblem] = useState({
    title: "",
    description: "",
    impact: "",
    area: "",
    date: new Date().toISOString().split("T")[0],
    status: "En análisis",
  });

  const [rootCauses, setRootCauses] = useState({
    ishikawa: "",
    fiveWhys: "",
    pareto: "",
    fmea: "",
  });

  const [analysisData, setAnalysisData] = useState({
    ishikawa: null,
    fiveWhys: null,
    pareto: null,
    fmea: null,
  });

  const [autoGeneratedConclusion, setAutoGeneratedConclusion] = useState("");
  const [autoGeneratedSolutions, setAutoGeneratedSolutions] = useState([]);

  useEffect(() => {
    const hasEnoughData = Object.values(rootCauses).filter((cause) => cause.trim() !== "").length >= 2;
    if (hasEnoughData) {
      const conclusion = generateRootCause(rootCauses, analysisData);
      setAutoGeneratedConclusion(conclusion);
      const solutions = generateSolutions(conclusion, problem.area);
      setAutoGeneratedSolutions(solutions);
    }
  }, [rootCauses, analysisData, problem.area]);

  const updateRootCause = (method, cause) => {
    setRootCauses((prev) => ({ ...prev, [method]: cause }));
  };

  const updateAnalysisData = (method, data) => {
    setAnalysisData((prev) => ({ ...prev, [method]: data }));
    if (data && !rootCauses[method]) {
      const suggestedRootCause = analyzeData(method, data, problem);
      if (suggestedRootCause) updateRootCause(method, suggestedRootCause);
    }
  };

  return (
    <div className="container mx-auto py-6">
      <header className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-primary">Solve-App</h1>
        <Button variant="outline"><FileText className="mr-2 h-4 w-4" /> Mis análisis</Button>
      </header>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList className="grid grid-cols-7 w-full">
          <TabsTrigger value="definicion"><AlertTriangle className="mr-2 h-4 w-4" /> Definición</TabsTrigger>
          <TabsTrigger value="ishikawa"><GitBranch className="mr-2 h-4 w-4" /> Ishikawa</TabsTrigger>
          <TabsTrigger value="5porques"><HelpCircle className="mr-2 h-4 w-4" /> 5 Por qué</TabsTrigger>
          <TabsTrigger value="pareto"><BarChart4 className="mr-2 h-4 w-4" /> Pareto</TabsTrigger>
          <TabsTrigger value="fmea"><ClipboardList className="mr-2 h-4 w-4" /> FMEA</TabsTrigger>
          <TabsTrigger value="conclusion"><CheckCircle2 className="mr-2 h-4 w-4" /> Conclusión</TabsTrigger>
          <TabsTrigger value="soluciones"><Lightbulb className="mr-2 h-4 w-4" /> Soluciones</TabsTrigger>
        </TabsList>

        <TabsContent value="definicion"><Card><CardHeader><CardTitle>Definición del problema</CardTitle></CardHeader></Card></TabsContent>
        <TabsContent value="ishikawa"><IshikawaDiagram problem={problem} onRootCauseUpdate={updateRootCause} onDataUpdate={updateAnalysisData} /></TabsContent>
        <TabsContent value="5porques"><FiveWhysAnalysis problem={problem} onRootCauseUpdate={updateRootCause} onDataUpdate={updateAnalysisData} /></TabsContent>
        <TabsContent value="pareto"><ParetoAnalysis problem={problem} onRootCauseUpdate={updateRootCause} onDataUpdate={updateAnalysisData} /></TabsContent>
        <TabsContent value="fmea"><FmeaAnalysis problem={problem} onRootCauseUpdate={updateRootCause} onDataUpdate={updateAnalysisData} /></TabsContent>
        <TabsContent value="conclusion"><RootCauseConclusion problem={problem} rootCauses={rootCauses} autoGeneratedConclusion={autoGeneratedConclusion} /></TabsContent>
        <TabsContent value="soluciones"><SolutionProposal problem={problem} rootCauses={rootCauses} autoGeneratedSolutions={autoGeneratedSolutions} finalConclusion={autoGeneratedConclusion} /></TabsContent>
      </Tabs>
    </div>
  );
}
